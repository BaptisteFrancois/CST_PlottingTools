

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

def TwoVarLineplot(
        array, x_axis, z_dim, title='', ylabel='', xlabel='', colors='k', caption_labels=None,
        threshold=None, color_threshold='red', label_threshold='Target', linewidth=2, figsize=None, 
        title_fontsize=14, label_fontsize=12, xticklabel_fontsize=12, yticklabel_fontsize=12, 
        grid=True, facecolor='whitesmoke', legend_facecolor='whitesmoke', 
        subplot_adjust=(None, None, 0.18, None), savepath=None, show=False,
        with_gcm_distribution_on_the_side=True, path_delta_change=None, sheet_delta_change=None,
        bin_width=None, color_gcm=None, color_map_gcm=None):

    """ Create line plots for two-dimensional arrays

        Parameters
        ----------

        - array: array
            The array to be plotted. The dimensions must be (x_axis, z_dim)

        - x_axis: list or 1D array 
            List of the x_ticks to be plotted

        - z_dim: list or 1D array 
            List of the 'array' indices on the y-axis to be plotted

        - title: str (Optional)
            Title of the plot. Default is an empty string.

        - ylabel: str (Optional)
            Label of the y-axis. Default is an empty string.

        - xlabel: str (Optional)
            Label of the x-axis. Default is an empty string.

        - caption_labels: str (Optional)
            Label of the captions. This is the label of the lines in the plot that represent 
            the z_dim.

        - colors: str or list (Optional, default is 'k')
            List of colors to be used in the plot. If a str, the same color will be applied to all
            lines. 

        - threshold: float (Optional)
            Value to be plotted as a horizontal line. Default is None, which results in no horizontal
            line being plotted

        - color_threshold: str (Optional, only used if threshold is not None)
            Color of the threshold line. Default is 'red'

        - label_threshold: str (Optional, only used if threshold is not None, default is 'Target')
            Label of the threshold line.

        - linewidth: int (Optional, default is 2)
            Width of the lines

        - figsize: tuple (Optional)
            Size of the figure. Default is (8, 5) is 'with_gcm_distribution_on_the_side' is False,
            and (8, 7) if 'with_gcm_distribution_on_the_side' is True.

        - title_fontsize: int (Optional, default is 14)
            Fontsize of the title. 

        - label_fontsize: int (Optional, default is 12)
            Fontsize of the labels

        - xticklabel_fontsize: int (Optional, default is 12)
            Fontsize of the x-ticks

        - yticklabel_fontsize: int (Optional, default is 12)
            Fontsize of the y-ticks

        - grid: bool (Optional, default is True)
            If True, the grid is plotted. 

        - facecolor: str (Optional, default is 'whitesmoke')
            Background color of the plot.

        - legend_facecolor: str (OPtional, default is 'whitesmoke')
            Background color of the legend. 

        - subplot_adjust: tuple (Optional, default is (None, None, 0.18, None))
            Adjust the subplot (top, right, bottom, left)

        - savepath: str (Optional, default is None)
            Path to save the plot. If None, the figure is not saved

        - show: bool (Optional, default is False)
            If True, the plot is displayed

        - with_gcm_distribution_on_the_side: bool (Optional, default is True)
            If True, the GCM distribution is plotted on the side of the plot. This function requires
            delta change factors to be pre-processed (typically using the 'ClimProjTools' package:
            https://github.com/BaptisteFrancois/ClimProjTools/tree/main). Delta change factors can
            be generated using another way, but the format must be the same as the one generated by
            the 'ClimProjTools' package.

        - path_delta_change: str (Optional, default is None)
            Path to the delta change plot. If 'with_gcm_distribution_on_the_side' is True, this path
            must be provided.

        - sheet_delta_change: str (Optional)
            Sheet of the 'path_delta_change' file to be read. Currently, only one sheet can be read,
            leading to only one ssp scenario being plotted. However, multiple time periods can be
            plotted (since the delta change factors for different periods are in the same sheet).

        - bin_width: float (Optional, default is None)
            Width of the bins for the histogram of the GCM distribution. If None, the histograms are
            plotted with 20 bins.

        - color_gcm: list (Optional, default is None)
            List of colors to be used for the GCM distribution. If None, the colors are generated
            from the 'YlOrBr' colormap.

        - color_map_gcm: str (Optional, default is None)
            Colormap to be used for the GCM distribution. If None, the 'YlOrBr' colormap is used.
            
    """

    try:
        len(x_axis) == array.shape[0]
    except:
        raise ValueError('The x_axis must have the same length as the array')
    
    try:
        len(colors) == len(z_dim)
    except: 
        raise ValueError('The number of colors must be equal to the number of z_dim')
    
    try:
        max(z_dim) < array.shape[1]
    except:
        raise ValueError('The maximum value of z_dim must be less than the number of dimensions of the array')

    if figsize is None:
        if with_gcm_distribution_on_the_side == False:
            figsize = (8, 5)
        else:
            figsize = (8, 6)

    if with_gcm_distribution_on_the_side == False:
        
        fig, ax = plt.subplots(figsize=figsize)

        for z in z_dim:
            if caption_labels:
                label = caption_labels[z]
            else:
                label = None
            ax.plot(x_axis, array[:,z], color=colors[z], label=label, lw=linewidth)

        if threshold:
            ax.axhline(threshold, color=color_threshold, linestyle='--', label=label_threshold)

        ax.set_title(title, fontsize=title_fontsize)
        ax.set_ylabel(ylabel, fontsize=label_fontsize)
        ax.set_xlabel(xlabel, fontsize=label_fontsize)

        plt.xticks(fontsize=xticklabel_fontsize)
        plt.yticks(fontsize=yticklabel_fontsize)
        
        if facecolor:
            ax.set_facecolor(facecolor)

        if caption_labels:
            handles, labels = ax.get_legend_handles_labels()
            legend = plt.figlegend(handles, labels, columnspacing=0.5, handletextpad=0.5, 
                                loc='lower center', ncol=len(z_dim), bbox_to_anchor=(0.5,-0.01),
                                fontsize=label_fontsize)
            if legend_facecolor:
                legend.get_frame().set_facecolor(legend_facecolor)
            
        if grid:
            ax.grid()
       

    if with_gcm_distribution_on_the_side == True:

        # Check if the path to the delta change plot is provided
        if path_delta_change == None or sheet_delta_change == None:
            raise ValueError(
                'The path to the delta change factors and the name of the excel sheet plot must be provided')
        else:
            delta_change = pd.read_excel(path_delta_change, sheet_name=sheet_delta_change, index_col='GCM')

        fig = plt.figure(figsize=figsize)
        gs = fig.add_gridspec(2, 1, height_ratios=[4, 1])

        ax1 = fig.add_subplot(gs[0]) # Main scatter plot
        ax2 = fig.add_subplot(gs[1], sharex=ax1) # GCM distribution on the bottom

        for z in z_dim:
            if caption_labels:
                label = caption_labels[z]
            else:
                label = None
            ax1.plot(x_axis, array[:,z], color=colors[z], label=label, lw=linewidth)

        if threshold:
            ax1.axhline(threshold, color=color_threshold, linestyle='--', label=label_threshold)

        ax1.set_title(title, fontsize=title_fontsize)
        ax1.set_ylabel(ylabel, fontsize=label_fontsize)
        ax1.tick_params(axis='y', which='major', labelsize=yticklabel_fontsize)
        
        if facecolor:
            ax1.set_facecolor(facecolor)

        if caption_labels:
            handles, labels = ax1.get_legend_handles_labels()
            legend = plt.figlegend(handles, labels, columnspacing=0.5, handletextpad=0.5, 
                                loc='lower center', ncol=len(z_dim), bbox_to_anchor=(0.5,-0.01),
                                fontsize=label_fontsize)
            if legend_facecolor:
                legend.get_frame().set_facecolor(legend_facecolor)
        
        if grid:
            ax1.grid()
        
    
        if bin_width is not None:
            bins = np.arange(x_axis.min(), x_axis.max(), bin_width)
        else:
            bins = 20

        if len(delta_change.columns) == 1:
            alpha = [1]
        else:
            alpha = [1, 0.5]

        # Set the colors
        if color_gcm is not None:
            if len(color_gcm) != len(delta_change.columns):
                raise ValueError('The number of colors must be the same as the number of periods')
            else:
                color_gcm_hist = color_gcm
        else:
            # Generate a list of colors from the 'YlOrBr' colormap. The list has the same length as the number of periods
            if color_map_gcm is not None:
                color_gcm_hist = \
                    plt.cm.get_cmap(color_map_gcm)(np.linspace(0, 1, len(delta_change.columns)))
            else:
                color_gcm_hist = plt.cm.YlOrBr(np.linspace(0, 1, len(delta_change.columns)))

        for i, col in enumerate(delta_change.columns):
            ax2.hist(delta_change[col], bins=bins, alpha=alpha[i], color=color_gcm_hist[i], label=col)

        
        ax2.set_xlabel(xlabel, fontsize=label_fontsize)
        ax2.set_ylabel('Nb of GCMs', fontsize=label_fontsize)
        ax2.tick_params(axis='x', which='major', labelsize=xticklabel_fontsize)
        ax2.tick_params(axis='y', which='major', labelsize=yticklabel_fontsize)
        ax2.legend(fontsize=10)
        ax2.grid()
        

        if facecolor:
            ax2.set_facecolor(facecolor)
            

    plt.tight_layout()
    plt.subplots_adjust(top=subplot_adjust[0], 
                        right=subplot_adjust[1], 
                        bottom=subplot_adjust[2], 
                        left=subplot_adjust[3])
        
    if show:
        plt.show()

    if savepath:
        fig.savefig(savepath)
    plt.close()

    if with_gcm_distribution_on_the_side == False:
        return fig, ax
    else:
        return fig, ax1, ax2

if __name__ == "__main__":
    import numpy as np
    import pandas as pd
    import seaborn as sns

    # Create a random dataset
    np.random.seed(0)
    x = np.linspace(0, 10, 100)
    y = np.random.rand(100, 5)
    y = np.cumsum(y, axis=0)
    y = y - y.mean(axis=0)

    # Create a random caption
    caption_labels = ['A', 'B', 'C', 'D', 'E']

    # Create a random threshold
    threshold = 0

    # Create a random color
    colors = sns.color_palette('husl', 5)

    TwoVarLineplot(y, x, z_dim=[0, 1, 2, 3, 4], title='Random data', ylabel='Y-axis', xlabel='X-axis',
                   caption_labels=caption_labels, threshold=threshold, colors=colors, 
                   savepath='../figures/TwoVarLineplot.png', with_gcm_distribution_on_the_side=False,
                   show=True)